!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.9 (r5096) - 24 Feb 2014 16:53
!
!  Differentiation of solver in forward (tangent) mode (with options i4 dr8 r4):
!   variations   of useful results: func
!   with respect to varying inputs: k
!   RW status of diff variables: k:in t:(loc) func:out
SUBROUTINE SOLVER_D(t, td, k, kd, func, funcd, n)
  IMPLICIT NONE
  INTEGER :: i, j, n
  REAL, INTENT(OUT) :: func
  REAL, INTENT(OUT) :: funcd
  REAL, DIMENSION(n, n) :: t
  REAL, DIMENSION(n, n) :: td
  REAL, DIMENSION(n, n), INTENT(IN) :: k
  REAL, DIMENSION(n, n), INTENT(IN) :: kd
  INTRINSIC SUM
  td = 0.0
  DO i=2,n-1
    DO j=2,n-1
      td(i, j) = ((td(i+1, j)*k(i+1, j)+t(i+1, j)*kd(i+1, j)+td(i-1, j)*&
&       k(i-1, j)+t(i-1, j)*kd(i-1, j)+td(i, j+1)*k(i, j+1)+t(i, j+1)*kd&
&       (i, j+1)+td(i, j-1)*k(i, j-1)+t(i, j-1)*kd(i, j-1))*(k(i+1, j)+k&
&       (i-1, j)+k(i, j+1)+k(i, j-1))-(t(i+1, j)*k(i+1, j)+t(i-1, j)*k(i&
&       -1, j)+t(i, j+1)*k(i, j+1)+t(i, j-1)*k(i, j-1))*(kd(i+1, j)+kd(i&
&       -1, j)+kd(i, j+1)+kd(i, j-1)))/(k(i+1, j)+k(i-1, j)+k(i, j+1)+k(&
&       i, j-1))**2
      t(i, j) = (t(i+1, j)*k(i+1, j)+t(i-1, j)*k(i-1, j)+t(i, j+1)*k(i, &
&       j+1)+t(i, j-1)*k(i, j-1))/(k(i+1, j)+k(i-1, j)+k(i, j+1)+k(i, j-&
&       1))
    END DO
  END DO
  funcd = SUM(td)
  func = SUM(t)
END SUBROUTINE SOLVER_D
