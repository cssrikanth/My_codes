!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.9 (r5096) - 24 Feb 2014 16:53
!
!  Differentiation of solver in reverse (adjoint) mode (with options i4 dr8 r4):
!   gradient     of useful results: func
!   with respect to varying inputs: k func
!   RW status of diff variables: k:out t:(loc) func:in-zero
SUBROUTINE SOLVER_B(t, tb, k, kb, func, funcb, n)
  IMPLICIT NONE
  INTEGER :: i, j, n
  REAL :: func
  REAL :: funcb
  REAL, DIMENSION(n, n) :: t
  REAL, DIMENSION(n, n) :: tb
  REAL, DIMENSION(n, n), INTENT(IN) :: k
  REAL, DIMENSION(n, n) :: kb
  INTRINSIC SUM
  REAL :: tempb0
  REAL :: tempb
  REAL :: temp
  DO i=2,n-1
    DO j=2,n-1
      CALL PUSHREAL4(t(i, j))
      t(i, j) = (t(i+1, j)*k(i+1, j)+t(i-1, j)*k(i-1, j)+t(i, j+1)*k(i, &
&       j+1)+t(i, j-1)*k(i, j-1))/(k(i+1, j)+k(i-1, j)+k(i, j+1)+k(i, j-&
&       1))
    END DO
  END DO
  tb = 0.0
  tb = funcb
  kb = 0.0
  DO i=n-1,2,-1
    DO j=n-1,2,-1
      CALL POPREAL4(t(i, j))
      temp = k(i+1, j) + k(i-1, j) + k(i, j+1) + k(i, j-1)
      tempb = tb(i, j)/temp
      tempb0 = -((t(i+1, j)*k(i+1, j)+t(i-1, j)*k(i-1, j)+t(i, j+1)*k(i&
&       , j+1)+t(i, j-1)*k(i, j-1))*tempb/temp)
      tb(i+1, j) = tb(i+1, j) + k(i+1, j)*tempb
      kb(i+1, j) = kb(i+1, j) + tempb0 + t(i+1, j)*tempb
      tb(i-1, j) = tb(i-1, j) + k(i-1, j)*tempb
      kb(i-1, j) = kb(i-1, j) + tempb0 + t(i-1, j)*tempb
      tb(i, j+1) = tb(i, j+1) + k(i, j+1)*tempb
      kb(i, j+1) = kb(i, j+1) + tempb0 + t(i, j+1)*tempb
      tb(i, j-1) = tb(i, j-1) + k(i, j-1)*tempb
      kb(i, j-1) = kb(i, j-1) + tempb0 + t(i, j-1)*tempb
      tb(i, j) = 0.0
    END DO
  END DO
  funcb = 0.0
END SUBROUTINE SOLVER_B
